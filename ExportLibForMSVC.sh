function runscript {
  # Path to export Libs and Includes
  OUTPUT_PATH="../SPIRV_Compiler/"

  if [ $# -eq 1 ]; then
    case "$1" in 
    */)
      OUTPUT_PATH="$1"
    ;;
    *)
      OUTPUT_PATH="$1/"
    ;;
    esac
  fi

  # Platform to build for
  BUILD_PLATFORM="x64"

  if [ -d "build" ]; then
    rm build -rf || rm build/* -rf || { echo >&2 " failed. Some file could be in use."; return 1; }
  fi

  mkdir -p build
  cd build
  # You can add or edit more cmake options for glslang building. Not all combinations are valid. Check for CMake erros.
  # You can also add static CRT for msvc. Check CMake for the required options.
  cmake ../. -DCMAKE_GENERATOR_PLATFORM=${BUILD_PLATFORM} -DENABLE_HLSL=OFF -DENABLE_COMBINED_LIB=ON -DBUILD_TESTING=OFF -DENABLE_GLSLANG_BINARIES=OFF -DENABLE_OPT=OFF -DENABLE_SPVREMAPPER=OFF || { echo >&2 "CMake failed to build project files."; return 1; }

  # Definitions required for the header files are generated by cmake in the root build directory (BuildDefines.h)

  # Required because the path is relative to the ./build/ directory.
  # DO NOT CHANGE THIS. Use the variable above.
  RELATIVE_OUTPUT_PATH="../${OUTPUT_PATH}"

  cmake --build . --config Debug --target SPIRV_Compiler_genfile || { echo >&2 "CMake build debug failed."; return 1; }
  mkdir -p "${RELATIVE_OUTPUT_PATH}"{Libs/{Debug,Release},Includes/glslang/{spirv,StandAlone,glslang}} || { echo >&2 "Failed to write export directory."; return 1; }
  cp -v spirv/Debug/SPIRV_Compiler.lib "${RELATIVE_OUTPUT_PATH}Libs/Debug"

  cmake --build . --config Release --target SPIRV_Compiler_genfile || { echo >&2 "CMake build release failed."; return 1; }
  cp -v spirv/Release/SPIRV_Compiler.lib "${RELATIVE_OUTPUT_PATH}Libs/Release"

  cp BuildDefines.h "${RELATIVE_OUTPUT_PATH}Includes/glslang/"
  cp ../libexport/SPIRV_Compiler.h "${RELATIVE_OUTPUT_PATH}Includes/glslang/"

  cp -r -v ../spirv/*.h "${RELATIVE_OUTPUT_PATH}Includes/glslang/spirv/"
  cp -r -v ../StandAlone/*.h "${RELATIVE_OUTPUT_PATH}Includes/glslang/StandAlone/"

  cd ../glslang/
  find . -name '*.h' -exec cp -v --parents \{\} "${RELATIVE_OUTPUT_PATH}Includes/glslang/glslang/" \;
  cd ..
}

ORIGINALDIR=$PWD
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
cd $SCRIPTDIR

runscript $1

cd $ORIGINALDIR

# Assume it was double click.
if [ $# -eq 0 ]; then
  $SHELL
fi